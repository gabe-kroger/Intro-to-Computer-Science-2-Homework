#include <iostream>
#include <algorithm>
#include <string>
#include <fstream>
#include <map>
#include <set>
#include <iterator>
#include <vector>

using namespace std;

set<string> wordSearch(string filePath) {

	fstream file(filePath);

	map<string, int> words;
	set<string> uniqueWords;

	string word;
	while (file >> word)
	{
		if (!words.count(word)) {
			words.insert(make_pair(word, 1));
		}
		else {
			words[word]++;
		};
	}

	file.close();

	for (map<string, int> ::iterator ele = words.begin();
		ele != words.end(); ele++)
	{
		if (ele->second == 1) {
			uniqueWords.insert(ele->first);
		}
	}

	return uniqueWords;
}

map<string, int> mapGen(string filePath) {
	fstream file(filePath);

	map<string, int> words;

	string word;
	while (file >> word)
	{
		if (!words.count(word)) {
			words.insert(make_pair(word, 1));
		}
		else {
			words[word]++;
		};
	}

	file.close();

	return words;
}

string lettersToSymbols(string input) {
	map<char, char> code = {
	{'a', '26'}, {'b', '25'}, {'c', '24'}, {'d', '23'}, {'e', '22'}, {'f', '21'}, {'g', '20'}, {'h', '19'}, {'i', '18'},
	{'j', ')'}, {'k', '<'}, {'l', '>'}, {'m', '='}, {'n', ':'}, {'o', ','}, {'p', '|'}, {'q', '+'}, {'r', '-'},
	{'s', ';'}, {'t', '4'}, {'u', '7'}, {'v', '3'}, {'w', '5'}, {'x', '9'}, {'y', '1'}, {'z', '5'}, {' ', '{'}
	};

	string letters = input;
	vector<char> v(letters.begin(), letters.end());
	string word;

	for_each(v.begin(), v.end(), [&](char ele) {
		word += code.find(ele)->second;
		});

	return word;
}

string symbolsToLetters(string input) {
	map<char, char> code = {
	{'26', 'a'}, {'25', 'b'}, {'24', 'c'}, {'23', 'd'}, {'22', 'e'}, {'21', 'f'}, {'20', 'g'}, {'19', 'h'}, {'18', 'i'},
	{'17', 'j'}, {'<', 'k'}, {'>', 'l'}, {'=', 'm'}, {':', 'n'}, {',', 'o'}, {'|', 'p'}, {'+', 'q'}, {'-', 'r'},
	{';', 's'}, {'4', 't'}, {'7', 'u'}, {'3', 'v'}, {'5', 'w'}, {'9', 'x'}, {'1', 'y'}, {'5', 'z'}, {'(', ' '}
	};

	string letters = input;
	vector<char> v(letters.begin(), letters.end());
	string word;

	for_each(v.begin(), v.end(), [&](char ele) {
		word += code.find(ele)->second;
		});

	// cout << word << endl;

	return word;
}


int main()
{
	set<string> words = wordSearch("C://Users//gabek//Desktop//words.txt");
	set<string> encodedWords;
	string line;


	map<string, int> wordCount = mapGen("C://Users//gabek//Desktop//words.txt");

	ofstream file;
	file.open("C://Users//gabek//Desktop//encodedWords.txt");

	for_each(words.begin(), words.end(), [&](string word) {
		file << lettersToSymbols(word);
		file << endl;
		});

	file.close();

	ifstream inputFile;
	inputFile.open("C://Users//gabek//Desktop//encodedWords.txt");

	while (inputFile >> line) {
		cout << symbolsToLetters(line) << endl;
	};

	inputFile.close();



	return 0;
}
